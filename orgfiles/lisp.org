#+TAGS: tech

Lisp のメモ

** 変数宣言

変数宣言には defconst, defvar がある。これらは特殊形式で下のように振る舞う。

- defconst は常に変数を初期化する。
- defvar は変数が未設定のときだけ初期化する。

defvar がこうなっているのは、ユーザーが事前に setq でカスタムした場合にそれを反映されるため。
defvar, defconst はコメントを書いておくと setq と違って describe-variables で説明を出してくれる。

** コンスセル

コンスセルは2つの任意要素 CAR, CDR の対である。
コンスセルを作るには関数 cons を利用する。

(cons "hello" 2)

上記の関数を評価した値は、 CAR が "hello" であり CDR が 2 のコンスセルである。Emacs の実行環境で試した場合は ("hello" . 2) と表示される。コンスセルは、その要素としてコンスセルを持つことができる。

(cons "boo" (cons "hello" (cons "goodbye" nil)))

上記の関数を評価した値は下記のような構造を持ったコンスセルとなる。

- CAR "boo"
- CDR
  - CAR "hello"
  - CDR
    - CAR "goodbye"
    - CDR nil

これは一般に連結リスト(linked list)と呼ばれるデータ構造をなす。最後の nil はリストが終わりであることを表すマーカで、終端記号と呼ばれる。Emacs の実行環境では ("boo" "hello" "goodbye") と表示される。

つまり、これまでリストと呼んでいたものはコンスセルだとも言える。たとえばリスト ("a" "b" "c") に対してその CAR, CDR を計算すると、それがコンスセルであることがわかる。

(car '("a" "b" "c")) ;; a を返す
(cdr '("a" "b" "c")) ;; ("b" "c") を返す

** 型を調べる

変数 x があるとき (type-of x) でその型を調べることができる。
** 関数へのパッチ(advice-add)

かつては defadvice という関数が使われていたが今では advice-add を使うのが推奨されているようだ。

https://misaki-blog.com/191026-emacs-advice-add/ ここに例がある。

(defun my-find-file (old-func &rest args)
  (print args)
  (apply old-func args))

(advice-add #'find-file :around #'my-find-file)
