* 使用例

たとえば下のようなファイルがあったとする

#+begin_src ruby
source 'https://rubygems.org'

ruby '2.6.6'

gem 'rails', '< 6.0.3'

group :development, :test do
  gem 'rubocop', require: false
  gem 'rubocop-rspec', require: false
end
#+end_src

** grep

#+begin_src bash
grep rubocop Gemfile
#+end_src

#+begin_export html
<img src="/img/grep-default.png">
#+end_export

** grep --color
#+begin_src bash
grep --color rubocop Gemfile
#+end_src

#+begin_export html
<img src="/img/grep-color.png">
#+end_export

** grep --invert-match
#+begin_src bash
grep --invert-match rubocop Gemfile
#+end_src

#+begin_export html
<img src="/img/grep-invert-match.png">
#+end_export

#+begin_src bash
grep rubocop Gemfile | grep --invert-match rubocop-rspec
#+end_src

#+begin_export html
<img src="/img/grep-invert-match2.png">
#+end_export

** grep --regexp

シングルクォートで終わる行を見つける(正規表現の例)

#+begin_src bash
grep --color --regexp \'$ Gemfile
#+end_src

#+begin_export html
<img src="/img/grep-regexp.png">
#+end_export

** grep --extended-regexp (egrep)

do と end をみつける(拡張正規表現の例)

#+begin_src bash
grep --color --extended-regexp 'do|end' Gemfile
# または
egrep --color 'do|end' Gemfile
#+end_src

#+begin_export html
<img src="/img/grep-extended-regexp.png">
#+end_export

** grep --perl-regexp

否定先読み(perl正規表現の例)。BSD grep では使えなかった。
[[https://ja.wikipedia.org/wiki/%E6%AD%A3%E8%A6%8F%E8%A1%A8%E7%8F%BE][wikipedia/正規表現]] に書いてあるようにメタ文字も perl 正規表現の範疇のようだ。

#+begin_src bash
grep --color --perl-regexp 'rubocop(?!-rspec)' Gemfile
#+end_src

#+begin_export html
<img src="/img/grep-perl-regexp.png">
#+end_export

** grep --recursive

ディレクトリを再帰的に探索する。

#+begin_src bash
grep --color --recursive rubocop ./
#+end_src

#+begin_export html
<img src="/img/grep-recursive.png">
#+end_export

** grep --line-number

発見したファイルの行番号を出力する。

#+begin_src bash
grep --color --recursive --line-number rubocop ./
#+end_src

#+begin_export html
<img src="/img/grep-line-number.png">
#+end_export

** grep --context

発見した行の周辺行を同時に出力する。

#+begin_src bash
grep --color --context=2 --line-number rubocop Gemfile
#+end_src

#+begin_export html
<img src="/img/grep-context.png">
#+end_export

* BDS grep

mac に入っていたのはこれ。BSD grep は、アップデートされてないため実行時間が遅いらしい。
git grep のほうがずっと高性能なので、この grep は基本使わなくて良さそう。

#+begin_src
grep --version
grep (BSD grep) 2.5.1-FreeBSD
#+end_src

#+begin_src
grep
grep [-abcDEFGHhIiJLlmnOoqRSsUVvwxZ] [-A num] [-B num] [-C[num]]
	[-e pattern] [-f file] [--binary-files=value] [--color=when]
	[--context[=num]] [--directories=action] [--label] [--line-buffered]
	[--null] [pattern] [file ...]
#+end_src

https://amaya382.hatenablog.jp/entry/2017/12/25/180700 に実行時間の話が書いてある。

* GNU grep

centos6 で試してみた

#+begin_src
money-book:~$ grep --version
GNU grep 2.6.3

Copyright (C) 2009 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
#+end_src

centos7 で試してみた

#+begin_src
grep --version
grep (GNU grep) 2.20
Copyright (C) 2014 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Mike Haertel and others, see <http://git.sv.gnu.org/cgit/grep.git/tree/AUTHORS>.
#+end_src

最近は gnu grep 3 が出ているようだ。

#+begin_src
grep --help
Usage: grep [OPTION]... PATTERN [FILE]...
Search for PATTERN in each FILE or standard input.
PATTERN is, by default, a basic regular expression (BRE).
Example: grep -i 'hello world' menu.h main.c

Regexp selection and interpretation:
  -E, --extended-regexp     PATTERN is an extended regular expression (ERE)
  -F, --fixed-strings       PATTERN is a set of newline-separated fixed strings
  -G, --basic-regexp        PATTERN is a basic regular expression (BRE)
  -P, --perl-regexp         PATTERN is a Perl regular expression
  -e, --regexp=PATTERN      use PATTERN for matching
  -f, --file=FILE           obtain PATTERN from FILE
  -i, --ignore-case         ignore case distinctions
  -w, --word-regexp         force PATTERN to match only whole words
  -x, --line-regexp         force PATTERN to match only whole lines
  -z, --null-data           a data line ends in 0 byte, not newline

Miscellaneous:
  -s, --no-messages         suppress error messages
  -v, --invert-match        select non-matching lines
  -V, --version             display version information and exit
      --help                display this help text and exit

Output control:
  -m, --max-count=NUM       stop after NUM matches
  -b, --byte-offset         print the byte offset with output lines
  -n, --line-number         print line number with output lines
      --line-buffered       flush output on every line
  -H, --with-filename       print the file name for each match
  -h, --no-filename         suppress the file name prefix on output
      --label=LABEL         use LABEL as the standard input file name prefix
  -o, --only-matching       show only the part of a line matching PATTERN
  -q, --quiet, --silent     suppress all normal output
      --binary-files=TYPE   assume that binary files are TYPE;
                            TYPE is 'binary', 'text', or 'without-match'
  -a, --text                equivalent to --binary-files=text
  -I                        equivalent to --binary-files=without-match
  -d, --directories=ACTION  how to handle directories;
                            ACTION is 'read', 'recurse', or 'skip'
  -D, --devices=ACTION      how to handle devices, FIFOs and sockets;
                            ACTION is 'read' or 'skip'
  -r, --recursive           like --directories=recurse
  -R, --dereference-recursive
                            likewise, but follow all symlinks
      --include=FILE_PATTERN
                            search only files that match FILE_PATTERN
      --exclude=FILE_PATTERN
                            skip files and directories matching FILE_PATTERN
      --exclude-from=FILE   skip files matching any file pattern from FILE
      --exclude-dir=PATTERN directories that match PATTERN will be skipped.
  -L, --files-without-match print only names of FILEs containing no match
  -l, --files-with-matches  print only names of FILEs containing matches
  -c, --count               print only a count of matching lines per FILE
  -T, --initial-tab         make tabs line up (if needed)
  -Z, --null                print 0 byte after FILE name

Context control:
  -B, --before-context=NUM  print NUM lines of leading context
  -A, --after-context=NUM   print NUM lines of trailing context
  -C, --context=NUM         print NUM lines of output context
  -NUM                      same as --context=NUM
      --group-separator=SEP use SEP as a group separator
      --no-group-separator  use empty string as a group separator
      --color[=WHEN],
      --colour[=WHEN]       use markers to highlight the matching strings;
                            WHEN is 'always', 'never', or 'auto'
  -U, --binary              do not strip CR characters at EOL (MSDOS/Windows)
  -u, --unix-byte-offsets   report offsets as if CRs were not there
                            (MSDOS/Windows)

'egrep' means 'grep -E'.  'fgrep' means 'grep -F'.
Direct invocation as either 'egrep' or 'fgrep' is deprecated.
When FILE is -, read standard input.  With no FILE, read . if a command-line
-r is given, - otherwise.  If fewer than two FILEs are given, assume -h.
Exit status is 0 if any line is selected, 1 otherwise;
if any error occurs and -q is not given, the exit status is 2.

Report bugs to: bug-grep@gnu.org
GNU Grep home page: <http://www.gnu.org/software/grep/>
General help using GNU software: <http://www.gnu.org/gethelp/>
#+end_src
