* Ruby に身体を慣らす
** Ruby は何を真と考えているかを正確に理解しよう

- Ruby での boolean は 偽 は false と nil であり、それ以外は真である。
- true, false は ruby ではグローバル変数である。
- そしてその値は TrueClass, FalseClass である。
- nil と false を区別したいときは nil? メソッドを使う。
- x == false を計算すると、オブジェクト x の実装によっては false でも nil でもないオブジェクトが真を返すことがありえる。

** オブジェクトを扱うときには nil かもしれないということを忘れないようにしよう

- すべてのオブジェクトは BaseObject を継承する。
- 型よりもインターフェース（どんなメソッドを持っているか）を重視する。
- メソッドを持ってないなら NoMethodError が発生する。
- 予想外の状況で nil が渡ってきてエラーになる事が多い。
- to_s は nil に対応している。
- Array#compact なども便利だ。
** Ruby の暗号めいた Perl 風の機能を避けよう

- =~ のような記号はやめて match を使おう。

** 定数がミュータブルなことに注意しよう

- 先頭が大文字になっている識別子は全て定数である。
- String, Array も例外ではなく、クラスが代入された定数。
- freeze で更新を抑止しないと定数は上書きされる危険がある。
- 警告は発生するが定数は再代入できる。
- モジュールにも freeze は使える。

** 実行時の警告に注意しよう

- プログラムを実行しようとする直前に、インタプリタはコードを解釈し中間言語にコンパイルする。
- コンパイル時に警告を出すことが有る。
- ruby は曖昧なコードも解釈できる File.join *args とか。
- 警告を出すにはオプションが必要なことも有る。
- 多くの場合カッコを書けばいい。
- RUBYOPT 環境変数を使って警告表示することもできる。
* クラス、オブジェクト、モジュール
** Ruby が継承階層をどのように組み立てるかを頭に入れよう

- オブジェクトはクラスのインスタンスである。インスタンス変数を持つことができる。
- クラスもまたオブジェクトである。クラス変数を持つことができる。
- スーパークラスは親クラスのこと。
- モジュールは Module クラスのインスタンスである。そして new メソッドがない。

- 特異クラスは、継承階層に含まれている名前のない不可視のクラスを指すわかりにくい用語
- 名前がない
- インスタンスを作ることはできない

- include でモジュールをミックスインしたときに起こること
  - 特異クラスを作成してクラス階層に挿入している
  - なのでメソッドの探索順は決まっている（最後にミックスインしたものから優先して探索される）
  - なのでミックスインしたモジュールが元のクラスのメソッドをオーバーライドすることは不可能

- 特異メソッド
  - 特定のインスタンス x にだけにメソッドを生やすことができる。この機能を特異メソッドと呼ぶ。
  - x に特異メソッドを追加するときは
    - 無名クラス y を作る
    - y にインスタンスメソッドを定義
    - y を x の特異クラスに差し込む
